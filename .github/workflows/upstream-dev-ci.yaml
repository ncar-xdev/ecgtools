name: Upstream CI
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # Daily “At 00:00” UTC
  workflow_dispatch: # allows you to trigger the workflow run manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  upstream-dev:
    name: upstream-dev
    runs-on: ubuntu-latest
    if: github.repository == 'ncar-xdev/ecgtools'
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Create conda environment
        id: conda
        uses: mamba-org/provision-with-micromamba@main
        with:
          cache-downloads: true
          micromamba-version: 'latest'
          environment-file: ci/environment-upstream-dev.yml
          extra-specs: |
            python=${{ matrix.python-version }}

      - name: Install ecgtools
        id: install
        run: |
          python -m pip install -e . --no-deps --force-reinstall
          conda list

      - name: Run Tests
        id: test
        run: |
          python -m pytest

      - name: Report Status
        if: |
          always()
          && (steps.conda.outcome != 'success' || steps.install.outcome != 'success' || steps.install.outcome != 'success')
        uses: actions/github-script@v6
        with:
          script: |
            const title = '⚠️ Upstream CI Failed ⚠️'
            const creator = 'github-actions[bot]'
            const issueLabel = 'CI'
            const workflow_url = `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`
            const issue_body = `[Workflow Run URL](${workflow_url})\n\n`
            let foundIssue = false
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (let issue of issues.data) {
              if (
                issue.user.login === creator &&
                issue.state === 'open' &&
                issue.labels.some((label) => label.name === issueLabel)
              ) {
                github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: issue_body,
                })
                core.info(`Updated an existing issue: ${issue.number}.`)
                foundIssue = true
                break
              }
            }
            if (!foundIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issue_body,
                labels: [issueLabel],
              })
              core.info('Opened a new issue')
            }
